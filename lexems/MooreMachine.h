/*
 * MooreMachine.h
 *
 *  Created on: Sep 22, 2019
 *      Author: igor
 */

#ifndef TREES_MOOREMACHINE_H_
#define TREES_MOOREMACHINE_H_

typedef enum {
    S_U,            // UNKNOWN OBJECT
    S_SEP,          // ANY SEPARATOR
    S_SIGNNUM,      // + OR -
    S_DIGIT,        //DIGIT, PART OF NUMBER(CONSTANT)
    S_DOTNUM,       //NUMBER WITH DOT
    S_E,            //EXPONENT
    S_ENUM,         //NUMBER WITH EXPONENT
    S_EDIG,         //ADD DIGIT TO EXP NUMBER
    S_CONST,        //DIGIT OR LETTER FOR CONST
    S_NAME,         //NAME
    S_SYMBOL,       //SYMBOL OR SYMBOL STRING
    S_CODEDSYM,     //ENCODED SYMBOL
    S_SYMEND,       //SYMBOL END
    S_BASESTART,    //NUMBER BASE POINTER "0"
    S_BASE,         //BASE NUMBER
    S_NUMB,         //NUMBER BODY
    S_GROUPSEP,     //INTERMEDIATE GROUP SEPARATOR
    S_GROUPSEPEND,  //GROUP END SEPARATOR
    S_SEPAN,        // SEP ANALYSIS
    S_ERR_CONST,    // ERROR IN CONSTANT
    S_ERR_ECONST,   // ERROR IN DOT\EXP CONSTANT
    S_ERR_NAME,     // ERROR IN NAME(LETTER ETC)
    S_ERR_SEP,      // ERROR IN TERM
    S_ERR_OP       // UNACCEPTABLE COMBINATION IN OPERATION
}MOORE_STATE;

typedef enum{
    SIG_DIGIT,  // DECIMAL DIG
    SIG_EXP,    // EXPONENT
    SIG_HEX,    // HEX DIGIT
    SIG_CONST,  // DETERM CONSTANT
    SIG_NAME,   // ONLY NAME ACCEPTABLE LETTER
    SIG_STRLIM, // STRING\CONST LIMITATION
    SIG_STRBEG, // BEGINNING OF STRING DECODES
    SIG_NC,     // NOT CLASSIFIED SYMBOL
    SIG_DOT,    // DOT AS SEPARATOR AND AS CONSTANT LETTER
    SIG_SIGN,   // NUMBER OR EXPONENT SIGN
    SIG_EMPTY,  // ADDITIONAL SEPARATOR AS TAB, ' '
    SIG_SEPOP,  // SINGLE OPERATION SEPARATOR
    SIG_SEPGROUP, // GROUP SEPARATOR
    SIG_SEPLST, // LIST SEPARATOR
    SIG_OPENBR, // OPEN BRACE
    SIG_CLOSEDBR, // CLOSED BRACE
    SIG_LTRCODE = 16// AN INDICATION OF POSSIBILITY TO ENCODE
}MOORE_SIGNAL;

MOORE_STATE moore_next_state(MOORE_STATE st, MOORE_SIGNAL sig);
MOORE_STATE moore_next_state_move(MOORE_SIGNAL sig);
MOORE_SIGNAL moore_str_to_sig(char*sig);
char* moore_sig_to_str(MOORE_SIGNAL sig);
char* moore_state_to_str(MOORE_STATE st);
MOORE_STATE moore_getstate(void);
MOORE_STATE moore_next_state_move_str(char* sig_s);
void moore_reset(void);


#endif /* TREES_MOOREMACHINE_H_ */
